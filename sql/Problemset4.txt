1) Find the names of all students who are friends with someone named Gabriel. (1 point possible)


mysql> select name from highschooler where ID in (select ID2 from Friend where ID1 in (select ID from highschooler where name="Gabriel"));
+-----------+
| name      |
+-----------+
| jordan    |
| Cassandra |
| Andrew    |
| Alexis    |
| Jessica   |
+-----------+
5 rows in set (0.04 sec)



2) For every pair of students who both like each other, return the name and grade of both students. include each pair only once, with the two names in alphabetical order. (1 point possible)


mysql> select name,grade from highschooler where ID in (select l1.ID1 from likes l1 join likes l2 on l1.ID1=l2.ID2 AND l1.ID2=l2.ID1) order by name asc;
+-----------+-------+
| name      | grade |
+-----------+-------+
| Cassandra |     9 |
| Gabriel   |     9 |
| Jessica   |    11 |
| Kyle      |    12 |
+-----------+-------+
4 rows in set (0.00 sec)




3) Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. (1 point possible)

mysql> select name,grade from highschooler where ID not in (select ID1 from Likes) AND ID not in (select ID2 from Likes) order by grade,name;
+---------+-------+
| name    | grade |
+---------+-------+
| jordan  |     9 |
| Tiffany |     9 |
| Logan   |    12 |
+---------+-------+
3 rows in set (0.00 sec)



4) For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. (1 point possible)


mysql> select name,grade from highschooler where ID in (select ID2 from likes where ID2 not in (select ID1 from likes));
+--------+-------+
| name   | grade |
+--------+-------+
| Haley  |    10 |
| jordan |    12 |
| Kris   |    10 |
+--------+-------+
3 rows in set (0.00 sec)



5) Find the difference between the number of students in the school and the number of different first names. (1 point possible)

mysql> select COUNT(name) - COUNT(DISTinCT name) AS total from highschooler;
+-------+
| total |
+-------+
|     2 |
+-------+
1 row in set (0.11 sec)


6) Find the name and grade of all students who are liked by more than one other student. (1 point possible)

mysql> select name,grade from highschooler where ID in (select ID2 from likes group by ID2 HAVinG COUNT(ID2)>1);
+-----------+-------+
| name      | grade |
+-----------+-------+
| Kris      |    10 |
| Cassandra |     9 |
+-----------+-------+
2 rows in set (0.00 sec)




7)What is the average number of friends per student? (Your result should be just one number.) (1 point possible)

mysql> select avg(a) as avg_no_friends from (select count(*) as a from highschooler h join friend f on h.id = f.id1 group by f.id1) as t;
+----------------+
| avg_no_friends |
+----------------+
|         2.5000 |
+----------------+
1 row in set (0.00 sec)


8)Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend.

mysql> select count(*) from (select id1 from friend f join highschooler h on h.id = f.id1 where id2 in (select f.id2 from highschooler h join friend f on h.id = f.id1 where h.name = "Cassandra") and name != "Cassandra" union (select f.id2 from highschooler h join friend f on h.id = f.id1 where h.name = "Cassandra")) as a;
+----------+
| count(*) |
+----------+
|        7 |
+----------+
1 row in set (0.00 sec)



9)Find the name and grade of the student(s) with the greatest number of friends. (1 point possible)

mysql> select name, grade from (select name, grade, dense_rank() over(order by count(f.id1) desc) as r from highschooler h join friend f on h.id = f.id1 group by f.id1) as t where r = 1;
+--------+-------+
| name   | grade |
+--------+-------+
| Andrew |    10 |
| Alexis |    11 |
+--------+-------+
2 rows in set (0.09 sec)
