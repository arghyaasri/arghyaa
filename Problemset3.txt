

1. Find the titles of all movies directed by Steven Spielberg. (1 point possible)

mysql> select title from movie where director="Steven Spielberg";
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.00 sec)



2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

mysql> select year,title from Movie where mID in (select mID from Rating where stars > 3) order by year asc;
+------+-------------------------+
| year | title                   |
+------+-------------------------+
| 1937 | Snow White              |
| 1939 | Gone with the Wind      |
| 1981 | Raiders of the Lost Ark |
| 2009 | Avatar                  |
+------+-------------------------+
4 rows in set (0.14 sec)


3. Find the titles of all movies that have no ratings. (1 point possible)

mysql> select title from Movie where mID not in (select mID from Rating );
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
2 rows in set (0.00 sec)



4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a null value for the date. (1 point possible)

mysql> select name from Reviewer where rID in (select rID from Rating where ratingDate IS null);
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)




5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)

mysql> select r1.name,m.title,r2.stars,r2.ratingDate from Movie m,Reviewer r1,Rating r2 where m.mID=r2.mID AND r2.rID=r1.rID order by r1.name,m.title,r2.stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingDate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The sound of music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | null       |
| Chris Jackson    | The sound of music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | null       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.00 sec)


6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)

mysql> select r.name,m.title from Rating r1 join Rating r2 on r1.rID=r2.rID AND r1.mID=r2.mID join Movie m on r1.mID =m.mID join Reviewer r on r1.rID=r.rID where r1.stars > r2.stars AND r1.ratingDate > r2.ratingDate;
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the Wind |
+----------------+--------------------+
1 row in set (0.00 sec)



7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

mysql> select title,MAX(stars) from Movie join Rating on Movie.mID=Rating.mID group by Movie.mID order by title;
+-------------------------+------------+
| title                   | MAX(stars) |
+-------------------------+------------+
| Avatar                  |          5 |
| E.T.                    |          3 |
| Gone with the Wind      |          4 |
| Raiders of the Lost Ark |          4 |
| Snow White              |          5 |
| The sound of music      |          3 |
+-------------------------+------------+
6 rows in set (0.00 sec)



8. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

mysql> select m.title,MAX(r.stars)-Min(r.stars) AS "ratingspread" from Movie m,Rating r where m.mID=r.mID group by r.mID order by ratingspread DESC,m.title;
+-------------------------+--------------+
| title                   | ratingspread |
+-------------------------+--------------+
| Avatar                  |            2 |
| Gone with the Wind      |            2 |
| Raiders of the Lost Ark |            2 |
| E.T.                    |            1 |
| Snow White              |            1 |
| The sound of music      |            1 |
+-------------------------+--------------+
6 rows in set (0.00 sec)


10. Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

mysql> select name from Reviewer where rID in (select rID from Rating where mID in (select mID from Movie where title="Gone With The Wind"));
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.00 sec)



11. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select r1.name,m.title,r2.stars from Movie m,Reviewer r1,Rating r2 where m.mID=r2.mID AND r2.rID=r1.rID AND m.director=r1.name;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)



12. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

mysql> select ConCAT(r1.name,"-",m.title) AS Name from Movie m,Reviewer r1,Rating r2 where m.mID=r2.mID AND r2.rID=r1.rID order by Name;
+-----------------------------------------+
| Name                                    |
+-----------------------------------------+
| Ashley White-E.T.                       |
| Brittany Harris-Raiders of the Lost Ark |
| Brittany Harris-Raiders of the Lost Ark |
| Brittany Harris-The sound of music      |
| Chris Jackson-E.T.                      |
| Chris Jackson-Raiders of the Lost Ark   |
| Chris Jackson-The sound of music        |
| Daniel Lewis-Snow White                 |
| Elizabeth Thomas-Avatar                 |
| Elizabeth Thomas-Snow White             |
| James Cameron-Avatar                    |
| Mike Anderson-Gone with the Wind        |
| Sarah Martinez-Gone with the Wind       |
| Sarah Martinez-Gone with the Wind       |
+-----------------------------------------+
14 rows in set (0.00 sec)



13. Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

mysql> select title from Movie where mID not in (select mID from Rating r1,Reviewer r2 where r1.rID=r2.rID AND r2.name="Chris Jackson");
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.00 sec)



15. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select r1.name,m.title,Min(r2.stars) from Movie m,Reviewer r1,Rating r2 where m.mID=r2.mID AND r2.rID=r1.rID;
+----------------+--------------------+---------------+
| name           | title              | Min(r2.stars) |
+----------------+--------------------+---------------+
| Sarah Martinez | Gone with the Wind |             2 |
+----------------+--------------------+---------------+
1 row in set (0.00 sec)




16. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)

mysql> select m.title,AVG(r2.stars) AS AvgRatings from Movie m,Reviewer r1,Rating r2 where m.mID=r2.mID AND r2.rID=r1.rID group by m.title order by AvgRatings DESC,m.title;

+-------------------------+------------+
| title                   | AvgRatings |
+-------------------------+------------+
| Snow White              |     4.5000 |
| Avatar                  |     4.0000 |
| Raiders of the Lost Ark |     3.3333 |
| Gone with the Wind      |     3.0000 |
| E.T.                    |     2.5000 |
| The sound of music      |     2.5000 |
+-------------------------+------------+
6 rows in set (0.00 sec)



17. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVinG or without COUNT.) (1 point possible)

mysql> select name from reviewer r join rating r1 on r.rid=r1.rid group by r1.rid HAVinG COUNT(*)>=3;
+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
2 rows in set (0.00 sec)



18. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

mysql> select m.title,m.director from Movie m join Movie m1 on m.director=m1.director group by m.mID HAVinG COUNT(*)>1 order by m.director,title;
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| Avatar                  | James Cameron    |
| Titanic                 | James Cameron    |
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
4 rows in set (0.00 sec)


19. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)


mysql> select title,AVG(stars) from Movie m join Rating r on m.mID=r.mID group by title HAVinG AVG(stars)=(select MAX(rates) from (select AVG(stars) AS rates from Rating group by mID) AS a);
+------------+------------+
| title      | AVG(stars) |
+------------+------------+
| Snow White |     4.5000 |
+------------+------------+
1 row in set (0.00 sec)


20. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)


mysql> select title,AVG(stars) from Movie m join Rating r on m.mID=r.mID group by title HAVinG AVG(Stars)=( select min(rates) from (select AVG(stars) AS rates from Rating group by mID) AS a);
+--------------------+------------+
| title              | AVG(stars) |
+--------------------+------------+
| The sound of music |     2.5000 |
| E.T.               |     2.5000 |
+--------------------+------------+
2 rows in set (0.00 sec)



21. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is null. (1 point possible)


mysql> select ConCAT(director,"-",title) AS director,MAX(stars) AS Rating from Movie m join Rating r on m.mID=r.mID where director IS NOT null group by director;
+------------------------------------------+--------+
| director                                 | Rating |
+------------------------------------------+--------+
| Victor Fleming-Gone with the Wind        |      4 |
| Robert Wise-The sound of music           |      3 |
| Steven Spielberg-Raiders of the Lost Ark |      4 |
| James Cameron-Avatar                     |      5 |
+------------------------------------------+--------+
4 rows in set, 1 warning (0.00 sec)














